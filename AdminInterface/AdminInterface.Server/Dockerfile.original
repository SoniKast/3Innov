# Étape 1 : Build du client React
FROM node:20-alpine AS react-build
WORKDIR /app
COPY AdminInterface/admininterface.client/package*.json ./admininterface.client/
WORKDIR /app/admininterface.client
RUN npm install
COPY AdminInterface/admininterface.client ./
RUN npm run build

# Étape 2 : Build de l'API ASP.NET Core
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src

# Copier le .csproj et restaurer les packages
COPY AdminInterface/AdminInterface.Server/AdminInterface.Server.csproj AdminInterface/AdminInterface.Server/
RUN dotnet restore AdminInterface/AdminInterface.Server/AdminInterface.Server.csproj

# Copier tout le reste du code
COPY . .

# Build de l'application
WORKDIR /src/AdminInterface/AdminInterface.Server
RUN dotnet build -c $BUILD_CONFIGURATION -o /app/build

# Étape 3 : Publish
FROM build AS publish
RUN dotnet publish -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# Étape 4 : Image finale (runtime image)
FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS final

# Installer le .NET SDK dans l'image runtime
RUN apk add --no-cache \
    curl \
    && curl -sSL https://aka.ms/install-dotnet.sh | bash \
    && apk add --no-cache --virtual .build-deps \
    bash \
    && dotnet --version \
    && apk del .build-deps

WORKDIR /app
EXPOSE 8080

# Copier le backend publié
COPY --from=publish /app/publish .

# Copier le build React dans wwwroot
COPY --from=react-build /app/admininterface.client/build ./wwwroot

# Lancer le backend
ENTRYPOINT ["dotnet", "AdminInterface.Server.dll"]